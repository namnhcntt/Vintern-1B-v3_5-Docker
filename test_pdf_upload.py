#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time

def test_pdf_upload():
    """Test PDF upload functionality"""
    
    # API endpoint
    url = "http://localhost:8000/api/upload-image"
    
    # Test with different templates
    templates = [
        ("", "Kh√¥ng s·ª≠ d·ª•ng template"),
        ("invoice", "Template h√≥a ƒë∆°n"),
        ("json", "Template JSON"),
        ("table", "Template b·∫£ng")
    ]
    
    for template, description in templates:
        print(f"\n{'='*60}")
        print(f"Testing: {description}")
        print(f"{'='*60}")
        
        # Prepare form data
        files = {
            'file': ('test_invoice.pdf', open('test_invoice.pdf', 'rb'), 'application/pdf')
        }
        
        data = {
            'prompt': 'Tr√≠ch xu·∫•t th√¥ng tin t·ª´ h√≥a ƒë∆°n n√†y',
            'max_tokens': 2000,
            'temperature': 0.1,
            'num_beams': 1,
            'stream': 'false'
        }
        
        if template:
            data['template'] = template
        
        try:
            print(f"ƒêang g·ª≠i request v·ªõi template: {template or 'None'}")
            start_time = time.time()
            
            response = requests.post(url, files=files, data=data, timeout=300)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            print(f"Th·ªùi gian x·ª≠ l√Ω: {processing_time:.2f} gi√¢y")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Th√†nh c√¥ng!")
                print(f"Template s·ª≠ d·ª•ng: {result.get('template_used', 'None')}")
                if 'pages' in result:
                    print(f"S·ªë trang x·ª≠ l√Ω: {result['pages']}")
                print(f"K·∫øt qu·∫£ OCR:")
                print("-" * 40)
                print(result['text'][:500] + "..." if len(result['text']) > 500 else result['text'])
                print("-" * 40)
            else:
                print(f"‚ùå L·ªói: {response.status_code}")
                print(f"Chi ti·∫øt: {response.text}")
                
        except requests.exceptions.Timeout:
            print("‚ùå Timeout - Request qu√° l√¢u")
        except Exception as e:
            print(f"‚ùå L·ªói: {str(e)}")
        finally:
            # Close file
            files['file'][1].close()
        
        # Wait between tests
        if template != templates[-1][0]:
            print("\nƒê·ª£i 5 gi√¢y tr∆∞·ªõc test ti·∫øp theo...")
            time.sleep(5)

def test_image_endpoint():
    """Test image endpoint with base64"""
    print(f"\n{'='*60}")
    print("Testing Image Endpoint v·ªõi template")
    print(f"{'='*60}")
    
    # Convert PDF to base64 for testing (this won't work for PDF, but tests the endpoint)
    try:
        with open('test_invoice.pdf', 'rb') as f:
            import base64
            pdf_data = f.read()
            # This is just for testing - PDF won't work with image endpoint
            base64_data = f"data:application/pdf;base64,{base64.b64encode(pdf_data).decode()}"
        
        url = "http://localhost:8000/api/image-to-text"
        data = {
            "prompt": "Tr√≠ch xu·∫•t th√¥ng tin h√≥a ƒë∆°n",
            "image": base64_data,
            "template": "invoice",
            "max_tokens": 1000,
            "stream": False
        }
        
        response = requests.post(url, json=data, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Image endpoint ho·∫°t ƒë·ªông v·ªõi template")
            print(f"Template s·ª≠ d·ª•ng: {result.get('template_used', 'None')}")
        else:
            print(f"‚ö†Ô∏è Image endpoint kh√¥ng h·ªó tr·ª£ PDF (expected): {response.status_code}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Test image endpoint: {str(e)}")

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu test t√≠nh nƒÉng OCR PDF")
    
    # Test PDF upload
    test_pdf_upload()
    
    # Test image endpoint
    test_image_endpoint()
    
    print(f"\n{'='*60}")
    print("‚úÖ Ho√†n th√†nh test!")
    print(f"{'='*60}")
